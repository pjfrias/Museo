const url= 'https://collectionapi.metmuseum.org/public/collection/v1';
const maxElementos = 100; // Limite de elementos una cantidad de elementos
const elementosPorPagina = 20; // Elementos por página
let paginaActual = 1;
let departamentos = [];
let Departamento = ''; // Variable para almacenar el departamento seleccionado
let controller = new AbortController();


// Función para cargar los departamentos disponibles en el <select>
const cargarDepartamentos = () => {
    
    controller.abort(); // Abortar la solicitud anterior
    controller = new AbortController(); // Crear un nuevo controlador

    fetch(`${url}/departments`, { signal: controller.signal })
        .then(response => response.json())
        .then(datos => {
            departamentos = datos.departments; // Guardar en el array departamentos
            const selectDepartamento = document.getElementById('departamento');
            // Limpiar el select
            selectDepartamento.innerHTML = '';

            // Agregar las opciones de departamentos
            departamentos.forEach(departamento => {
                const opcion = document.createElement('option');
                opcion.value = departamento.departmentId; // Usar el id del departamento
                opcion.textContent = departamento.displayName;
                selectDepartamento.appendChild(opcion);
            });

            // Configurar el evento para cambiar el departamento seleccionado
            selectDepartamento.addEventListener('change', (event) => {
                Departamento = event.target.value; // Guardar el ID del departamento seleccionado
                paginaActual = 1; // Reiniciar la página actual
                //buscarObjetos(); // Realizar la búsqueda con el nuevo departamento
            });
        })
        .catch(error => {
            if (error.name === 'AbortError') {
                console.log('Solicitud abortada');
            } else if (error.message.includes('429')) {
                console.log('Límite de peticiones excedido, por favor espera.');
            } else {
                console.error('Error en la solicitud:', error.message);
            }
        });
};

// Función para realizar la búsqueda de objetos
/*const buscarObjetos = () => {
    const palabraClave = document.getElementById('palabraClave').value;
    const ubicacion = document.getElementById('ubicacion').value;
    let consulta = `${url}/search?departmentId=${Departamento}&hasImages=true`;

    if (palabraClave) consulta += `&q=${encodeURIComponent(palabraClave)}`
    else consulta += `&q=''`;
    if (ubicacion) consulta += `&geoLocation=${encodeURIComponent(ubicacion)}`;
    console.log('Consulta:', consulta);

    controller.abort(); // Abortar la solicitud anterior
    controller = new AbortController(); // Crear un nuevo controlador

    fetch(consulta, { signal: controller.signal })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error HTTP! Estado: ${response.status}`);
            }
            return response.json();
        })
        .then(datos => {
            // Filtra los resultados para solo obtener aquellos con imágenes válidas
            const idsObjetos = (datos.objectIDs || []).filter(id => id).slice(0, maxElementos);

            return Promise.all(
                idsObjetos.map(id => fetch(`${url}/objects/${id}`).then(res => res.json()))
            );
        })
        .then(todosObjetos => {
            var objetosValidos = todosObjetos.filter(objeto => objeto.primaryImage);

            // Conjunto para rastrear títulos únicos
            const titulosVistos = new Set();
                
            // Filtrar objetos duplicados por título
            const objetosUnicos = objetosValidos.filter(objeto => {
                if (titulosVistos.has(objeto.title)) {
                    return false; // Excluir objetos con títulos duplicados
                } else {
                    titulosVistos.add(objeto.title);
                    return true;
                }
            });
            objetosValidos = objetosUnicos;

            // Limitando a 200 elementos después del filtrado
            const objetosAMostrar = objetosValidos.slice(0, maxElementos);

            

            // Mostrar solo los objetos para la página actual
            const indiceInicio = (paginaActual - 1) * elementosPorPagina;
            const indiceFinal = indiceInicio + elementosPorPagina;
            const objetosPaginados = objetosAMostrar.slice(indiceInicio, indiceFinal);

            mostrarObjetos(objetosPaginados);
            configurarPaginacion(objetosAMostrar.length);
        })
        .catch(error => {
            if (error.name === 'AbortError') {
                console.log('Solicitud abortada');
            } else if (error.message.includes('429')) {
                console.log('Límite de peticiones excedido, por favor espera.');
            } else {
                console.error('Error en la solicitud:', error.message, 'Código de error:', error.code || 'No disponible');
            }
        });
    
    
    
};
*/
const buscarObjetos = () => {
    const palabraClave = document.getElementById('palabraClave').value;
    const ubicacion = document.getElementById('ubicacion').value;
    let consulta = `${url}/search?departmentId=${Departamento}&hasImages=true`;

    if (palabraClave) consulta += `&q=${encodeURIComponent(palabraClave)}`;
    else consulta += `&q=''`;
    if (ubicacion) consulta += `&geoLocation=${encodeURIComponent(ubicacion)}`;
    console.log('Consulta:', consulta);

    controller.abort(); // Abortar la solicitud anterior
    controller = new AbortController(); // Crear un nuevo controlador

    fetch(consulta, { signal: controller.signal })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error HTTP! Estado: ${response.status}`);
            }
            return response.json();
        })
        .then(datos => {
            // Filtra los resultados para solo obtener aquellos con imágenes válidas
            const idsObjetos = (datos.objectIDs || []).filter(id => id).slice(0, maxElementos);

            // Calcular el rango de objetos a cargar para la página actual
            const indiceInicio = (paginaActual - 1) * 20; // Mostrar 20 elementos por página
            const indiceFinal = Math.min(indiceInicio + 20, idsObjetos.length);
            const idsPaginados = idsObjetos.slice(indiceInicio, indiceFinal);

            // Función que procesa cada objeto y lo agrega al array
            const procesarObjeto = (id) => {
                return fetch(`${url}/objects/${id}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Estado: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.primaryImage) {
                            return data;
                        }
                        return null;
                    });
            };

            // Reducir la lista de IDs a promesas usando `map`
            const promesas = idsPaginados.map(id => procesarObjeto(id));

            // Ejecutar todas las promesas en paralelo
            Promise.all(promesas)
                .then(resultados => {
                    // Filtrar objetos válidos
                    const objetosPaginados = resultados.filter(data => data !== null);

                    // Filtrar objetos duplicados por título
                    const titulosVistos = new Set();
                    const objetosUnicos = objetosPaginados.filter(objeto => {
                        if (titulosVistos.has(objeto.title)) {
                            return false; // Excluir objetos con títulos duplicados
                        } else {
                            titulosVistos.add(objeto.title);
                            return true;
                        }
                    });

                    // Limitar a maxElementos después del filtrado
                    const objetosAMostrar = objetosUnicos.slice(0, maxElementos);

                    // Mostrar solo los objetos para la página actual
                    mostrarObjetos(objetosAMostrar);
                    configurarPaginacion(idsObjetos.length);
                })
                .catch(error => {
                    if (error.name === 'AbortError') {
                        console.log('Solicitud abortada');
                    } else if (error.message.includes('429')) {
                        console.log('Límite de peticiones excedido, por favor espera.');
                    } else {
                        console.error('Error en el procesamiento de objetos:', error.message);
                    }
                });
        })
        .catch(error => {
            if (error.name === 'AbortError') {
                console.log('Solicitud abortada');
            } else if (error.message.includes('429')) {
                console.log('Límite de peticiones excedido, por favor espera.');
            } else {
                console.error('Error en la solicitud:', error.message);
            }
        });
};



// Función para mostrar los objetos
const mostrarObjetos = (objetos) => {
    const galeria = document.getElementById('galeria');
    galeria.innerHTML = '';

    objetos.forEach(objeto => {
        // Imprimir el ID del objeto en la consola
        console.log(`ID del objeto: ${objeto.objectID}, Departamento: ${objeto.department}`);

        const tarjeta = document.createElement('div');
        tarjeta.className = 'tarjeta';

        const imagenPrincipal = objeto.primaryImage || 'defaul_image.jpg';
        const titulo = objeto.title || 'Título no disponible';
        const cultura = objeto.culture || 'Cultura no disponible';
        const dinastia = objeto.dynasty || 'Dinastía no disponible';
        const fecha = objeto.objectDate || 'Fecha no disponible';

        // Construcción del carrusel
        let imagenes = [imagenPrincipal];
        if (objeto.additionalImages && objeto.additionalImages.length > 0) {
            imagenes = imagenes.concat(objeto.additionalImages);
        }

        const carrusel = `
            <div class="carousel-container">
                <div class="carousel-images">
                    ${imagenes.map(img => `<img src="${img}" alt="Imagen adicional">`).join('')}
                </div>
                ${imagenes.length > 1 ? `
                    <button class="carousel-button prev">Anterior</button>
                    <button class="carousel-button next">Siguiente</button>
                ` : ''}
            </div>
        `;

        tarjeta.innerHTML = `
            ${carrusel}
            <div class="contenido-tarjeta">
                <h3>${titulo}</h3>
                <p><strong>Cultura:</strong> ${cultura}</p>
                <p><strong>Dinastía:</strong> ${dinastia}</p>
                <p><strong>Fecha:</strong> ${fecha}</p>
            </div>
            <div class="fecha">${fecha}</div>
        `;

        galeria.appendChild(tarjeta);
    });

    // Inicializar los botones del carrusel
    document.querySelectorAll('.carousel-container').forEach(container => {
        const images = container.querySelectorAll('.carousel-images img');
        const prevButton = container.querySelector('.carousel-button.prev');
        const nextButton = container.querySelector('.carousel-button.next');
        let currentIndex = 0;

        const updateCarousel = () => {
            const offset = -currentIndex * 100;
            container.querySelector('.carousel-images').style.transform = `translateX(${offset}%)`;
        };

        if (prevButton) {
            prevButton.addEventListener('click', () => {
                currentIndex = (currentIndex > 0) ? currentIndex - 1 : images.length - 1;
                updateCarousel();
            });
        }

        if (nextButton) {
            nextButton.addEventListener('click', () => {
                currentIndex = (currentIndex < images.length - 1) ? currentIndex + 1 : 0;
                updateCarousel();
            });
        }

        updateCarousel();
    });
};




// Función para configurar la paginación
const configurarPaginacion = (totalElementos) => {
    const paginacion = document.getElementById('paginacion');
    paginacion.innerHTML = '';

    const totalPaginas = Math.ceil(Math.min(totalElementos, maxElementos) / elementosPorPagina);

    if (paginaActual > 1) {
        const botonAnterior = document.createElement('button');
        botonAnterior.textContent = 'Anterior';
        botonAnterior.onclick = () => {
            paginaActual--;
            buscarObjetos();
        };
        paginacion.appendChild(botonAnterior);
    }

    for (let i = 1; i <= totalPaginas; i++) {
        const botonPagina = document.createElement('button');
        botonPagina.textContent = i;
        botonPagina.onclick = () => {
            paginaActual = i;
            buscarObjetos();
        };
        if (i === paginaActual) {
            botonPagina.disabled = true;
        }
        paginacion.appendChild(botonPagina);
    }

    if (paginaActual < totalPaginas) {
        const botonSiguiente = document.createElement('button');
        botonSiguiente.textContent = 'Siguiente';
        botonSiguiente.onclick = () => {
            paginaActual++;
            buscarObjetos();
        };
        paginacion.appendChild(botonSiguiente);
    }
};

// Configura el evento de búsqueda
document.getElementById('buscar').addEventListener('click', () => {
    paginaActual = 1; // Reinicia la página actual
    buscarObjetos();
});

// Carga inicial de departamentos y objetos
cargarDepartamentos();
